{% comment %}
  The contents of the product.liquid template can be found in /sections/nov-product-template.liquid
{% endcomment %}

{% include 'nov-breadcrumb' %}

<div class="page-width">
  {% section 'nov-product-template' %}
</div>

<script>
  // Override default values of shop.strings for each template.
  // Alternate product templates can change values of
  // add to cart button, sold out, and unavailable states here.
  theme.productStrings = {
    addToCart: {{ 'products.product.add_to_cart' | t | json }},
    soldOut: {{ 'products.product.sold_out' | t | json }},
    unavailable: {{ 'products.product.unavailable' | t | json }}
  }

  var selectCallbackProduct = function(variant, selector) {
    var moneyFormat = theme.moneyFormat,
        variant = variant,
        selector = selector;
    var $productImage = $('.thumb_none #productThumbs .active img'),
        $addToCart = $('.thumb_none #AddToCart'),
        $productPrice = $('.thumb_none .product-price__price'),
        $comparePrice = $('.thumb_none #ComparePrice-deal'),
        $quantityElements = $('.thumb_none .quantity-selector, .thumb_none label + .js-qty'),
        $quantity = $('.product-form__item--quantity'),
        $addToCartText = $('.thumb_none #AddToCartText');
    if (variant) {
        if (window.swatch_enable) {
            var form = $('#' + selector.domIdPrefix).closest('form');
            for (var i = 0, length = variant.options.length; i < length; i++) {
                var radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i] + '"]');
                if (radioButton.size()) {
                    radioButton.get(0).checked = true;
                }
            }
        }
        if (variant.featured_image) {
            var newImage = variant.featured_image;
            var element = $productImage[0];
            Shopify.Image.switchImage(newImage, element, function(src, imgObject, el) {
              console.log(imgObject);
              
              $('.thumbItem').parent().removeClass('active');
              $('.thumbItem[data-image-id="'+imgObject.id+'"]').parent().addClass('active');
              $('.thumbItem[data-image-id="'+imgObject.id+'"]').find('image-zoom').attr('src', src);
              $(".thumb_none #productThumbs .owl-carousel").trigger("to.owl.carousel", [$('.thumbItem[data-image-id="'+imgObject.id+'"]').attr('data-position'), 1]);
            });
        }
        if (variant.available) {
            $addToCart.removeClass('disabled').prop('disabled', false);
            $addToCartText.html("Add to cart");
            $quantityElements.show();
            $quantity.show();
        } else {
            $addToCart.addClass('disabled').prop('disabled', true);
            $addToCartText.html("Sold out");
            $quantityElements.hide();
            $quantity.hide();
        }
        $productPrice.html(theme.Currency.formatMoney(variant.price, moneyFormat));
        if (variant.compare_at_price > variant.price) {
            $comparePrice.html(theme.Currency.formatMoney(variant.compare_at_price, moneyFormat)).show();
        } else {
            $comparePrice.hide();
        }
        if ($('#currencies').length != 0) {
            Currency.convertAll(shopCurrency, $('#currencies span.selected').attr('data-currency'));
        }
    } else {
        $addToCart.addClass('disabled').prop('disabled', true);
        $addToCartText.html("Unavailable");
        $quantityElements.hide();
    }
  };

  $(document).ready(function() {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallbackProduct,
      enableHistoryState: true
    });


    ajaxCart.init({
      formSelector: '.product-form-nov-product-template',
      cartContainer: '#cart-info',
      addToCartSelector: '#AddToCart',
      cartCountSelector: '#CartCount',
      cartCostSelector: '#CartCost',
      moneyFormat: theme.moneyFormat
    });

    {% if product.available and product.options.size > 1 %}
      //$('.selector-wrapper').addClass('d-flex align-items-center');
      Shopify.linkOptionSelectors({{ product | json }});
    {% endif %}

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>