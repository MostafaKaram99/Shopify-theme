<style>
  #shopify-section-{{ section.id }} .distance {
    padding-top: 30px;
    padding-bottom: 30px;
  }
</style>
<div class="block_deal distance" data-section-id="{{ section.id }}">
  <div class="container_1320">
    <div class="block_title {{ section.settings.title_alignment }}">
      {% if section.settings.title != blank %}
        <div class="title_block" style="font-family:{{settings.type_header_family}}; {% if settings.heading_text != blank %}color: {{ settings.heading_text }};{% endif %}">{{ section.settings.title | nofilter }}</div>
      {% endif %}
      {% if section.settings.subheading != blank %}
        <div class="sub_title" style="font-family:{{settings.type_base_family}}; {% if settings.sub_heading_text != blank %}color: {{ settings.sub_heading_text }};{% endif %}">{{ section.settings.subheading | escape }}</div>
      {% endif %}
    </div>

    <div class="block_content">
      {% assign product = all_products[section.settings.product_handle] %}
      {% assign collection = product.collections.first %}
      <div class="item-product product-template__container row" itemscope itemtype="http://schema.org/Product" id="ProductSection-Dl" data-enable-history-state="true" data-type="product-template" data-wishlist-product>
        {% assign variantCount = product.variants | size %}
        {%- assign current_variant = product.selected_or_first_available_variant -%}
        {%- assign product_image = '1200x' -%} 

        <div class="product-single__photos thumbnail-container col-lg-6 col-md-12">
          {% if section.settings.product_handle != blank %}
            {% if product.images.size > 1 %}
              <div id="productThumbs">
                <div class="thumblist" data-pswp-uid="1">
                  <div class="owl-carousel owl-theme" data-autoplay="false" data-autoplayTimeout="6000" data-items="1" data-margin="0" data-nav="false" data-dots="true" data-loop="false" data-items_tablet="3" data-items_mobile="1">
                    {% for image in product.images %}
                      <div class="thumbItem" data-image-id="{{ image.id }}" data-position="{{ forloop.index | minus: 1 }}">
                        <a href="javascript:void(0)" data-image="{{ image.src | img_url: product_image }}" data-zoom-image="{{ image.src | img_url: product_image_zoom_size }}" class="product-single__thumbnail">
                          <img class="img-fluid img-responsive image-zoom lazyload" data-img="{{ image.src }}" data-src="{{ image.src | img_url: product_image }}" alt="">
                        </a>
                      </div>
                    {% endfor %}
                  </div>
                </div>
              </div>
            {% endif %}
          {% else %}
            {% capture current %}{% cycle 1, 2, 3, 4, 5, 6 %}{% endcapture %}
            {{ 'product-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}
          {% endif %}
        </div>
        <div class="product-single__info product__info col-lg-6 col-md-12">
          <div class="block_info">
            <div class="product__title">
              <a href="{{ product.url | within: collection }}">{{ product.title | truncatewords: 12 }}</a>
            </div>
            <div class="product-single__meta">
              <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">

                <p class="product-single__price-dl{% unless current_variant.available %} product-price--sold-out{% endunless %} d-flex align-items-center">
                  {% if current_variant.compare_at_price > current_variant.price %}
                    <span class="product-price__price product-price__price-dl product-price__sale product-price__sale--single">
                      <span id="ProductPrice-deal"
                        itemprop="price" content="{{ current_variant.price | divided_by: 100.00 }}" class="money">
                        {{ current_variant.price | money }}
                      </span>
                      <span class="money product-price__sale-label product-price__sale-label-dl d-none">{{ 'products.product.on_sale' | t }}</span>
                    </span>
                    <s id="ComparePrice-deal" class="ml-25">{{ current_variant.compare_at_price | money }}</s>
                  {% else %}
                    <span class="product-price__price product-price__price-dl">
                      <span id="ProductPrice-deal"
                        itemprop="price" content="{{ current_variant.price | divided_by: 100.00 }}" class="money">
                        {{ current_variant.price | money }}
                      </span>
                      <span class="money product-price__sale-label product-price__sale-label-dl d-none">{{ 'products.product.on_sale' | t }}</span>
                    </span>
                    <s id="ComparePrice-deal" class="ml-25">{{ current_variant.compare_at_price | money }}</s>
                  {% endif %}
                </p>

                <form action="/cart/add" method="post" enctype="multipart/form-data" class="product-form product-form-dl product-form--hide-variant-labels">
                  <div class="selectorVariants {% if product.variants.size > 1 %} has-border{% endif %}">
                      {% if variantCount > 1 %}
                        {% for option in product.options %}
                          {% include 'nov-swatch' with option %}
                        {% endfor %}
                      {% endif %}
                    
                    <select name="id" id="productSelect" class="enable_swatch hide">
                      {% for variant in product.variants %}
                        {% if variant.available %}
                          <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">
                            {{ variant.title }}
                          </option>
                        {% else %}
                          <option disabled="disabled">{{ variant.title }} - {{ 'products.product.notify_me' | t }}</option>
                        {% endif %}
                      {% endfor %}
                    </select>
                  </div>

                  <div class="product-form__item product-form__item--submit">
                    <button data-handle="{{ product.handle }}" type="submit" name="add" id="AddToCart" class="hover_x btn product-form__cart-submit{% if product.options.size == 1 and product.variants[0].title == 'Default Title' %} product-form__cart-submit--small{% endif %}">
                      <span id="AddToCartText">
                        {% unless current_variant.available %}
                          {{ 'products.product.notify_me' | t }}
                        {% else %}
                          {{ 'products.product.add_to_cart' | t }}
                        {% endunless %}
                      </span>
                      <i id="zizimomo" class="zmdi zmdi-long-arrow-right"></i>
                    </button>
                  </div>
                  {% if settings.payment_button_enable %}
                    <div class="product-form__item product-form__item--checkout">
                      {% form 'product', product, class:form_classes, novalidate: 'novalidate', data-product-form: '' %}
                        {{ form | payment_button }}
                      {% endform %}
                    </div>
                  {% endif %}
                </form>
                {% if section.settings.show_size_chart %}
                  <div class="size_chart d-flex align-items-center" data-toggle="modal" data-target="#Size_chart">
                    <i class="zmdi zmdi-ruler"></i>
                    <span>{{ 'sections.product_deals.size_chart' | t }}</span>
                  </div>
                {% endif %}
                {% if section.settings.show_description %}
                  <div class="block_description">
                    {% if section.settings.title != blank %}
                      <div class="description" style="{% if section.settings.color_description != blank %}color: {{ section.settings.color_description }};{% endif %}{% if section.settings.size_description != blank %}font-size: {{ section.settings.size_description }}{% endif %}">{{ section.settings.description | nofilter }}</div>
                    {% endif %}
                    {% for block in section.blocks %}
                      <div class="sub_description" style="{% if block.settings.color_subdescription != blank %}color: {{ block.settings.color_subdescription }};{% endif %}{% if block.settings.size_subdescription != blank %}font-size: {{ block.settings.size_subdescription }}{% endif %}">{{ block.settings.subdescription | escape }}</div>
                    {% endfor %}
                  </div>
                {% endif %}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% schema %}
  {
    "name": "Vinova products",
    "class": "index-section section-product position-relative",
    "settings":[
      {
        "type": "text",
        "id": "title",
        "label": "Heading",
        "default": "Vinova Products"
      },

      {
        "type": "text",
        "id": "subheading",
        "label": "Sub Heading",
        "default": "Subtitle from happy customers"
      },

      {
        "type": "select",
        "id": "title_alignment",
        "label": "Heading alignment",
        "default": "text-left",
        "options": [
          {
            "value": "text-left",
            "label": "Left"
          },
          {
            "value": "text-center",
            "label": "Center"
          },
          {
            "value": "text-right",
            "label": "Right"
          }
        ]
      },

      {
        "type": "header",
        "content": "Product"
      },
      {
        "type": "product",
        "id": "product_handle",
        "label": "Product"
      },
      {
        "type": "checkbox",
        "id": "show_size_chart",
        "label": "Show Size Chart",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "show_description",
        "label": "Show Description",
        "default": true
      },
      {
        "type": "text",
        "id": "description",
        "label": "Description",
        "default": "Vinova Description"
      }
  
    ],
    "blocks": [
      {
        "type": "item",
        "name": "Sub Description",
        "settings": [
          {
            "type": "text",
            "id": "subdescription",
            "label": "Sub Description",
            "default": "Subtitle from happy customers"
          },

          {
            "type": "color",
            "id": "color_subdescription",
            "label": "Color Sub Heading",
            "default": "#222"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Vinova Products",
        "category": "Product"
      }
    ]
  }
{% endschema %}

{% unless product == empty %}
  <script type="application/json" id="ProductJson-Dl">
    {{ product | json }}
  </script>
{% endunless %}

<script>
  {% if product.available %} 
  function updatePrice() {
    var regex = /([0-9]+[.|,][0-9]+[.|,][0-9]+)/g;
    var unitPriceTextMatch = jQuery('#ProductPrice-deal').text().match(regex);
    
    if (!unitPriceTextMatch) {
      regex = /([0-9]+[.|,][0-9]+)/g;
      unitPriceTextMatch = jQuery('#ProductPrice-deal').text().match(regex);     
    }
    
    if (unitPriceTextMatch) {
      var unitPriceText = unitPriceTextMatch[0];
      var unitPrice = unitPriceText.replace(/[.|,]/g,'');
      var quantity = parseInt(jQuery('#Quantity').val());
      var totalPrice = unitPrice * quantity;

      var totalPriceText = Shopify.formatMoney(totalPrice, theme.money_format);
      regex = /([0-9]+[.|,][0-9]+[.|,][0-9]+)/g;     
      if (!totalPriceText.match(regex)) {
        regex = /([0-9]+[.|,][0-9]+)/g;
      } 
      totalPriceText = totalPriceText.match(regex)[0];

      var regInput = new RegExp(unitPriceText, "g"); 
      var totalPriceHtml = jQuery('#ProductPrice-deal').html().replace(regInput , totalPriceText);

      jQuery('.total-price span').html(totalPriceHtml);     
    }
  }
  jQuery('#Quantity').on('change', updatePrice);
  {% endif %}
  
  var selectCallbackProduct = function(variant, selector) {
    var moneyFormat = theme.moneyFormat,
        variant = variant,
        selector = selector;
    var $productImage = $('#ProductSection-Dl #productThumbs .active img'),
        $addToCart = $('#ProductSection-Dl #AddToCart'),
        $productPrice = $('#ProductSection-Dl .product-price__price'),
        $comparePrice = $('#ProductSection-Dl #ComparePrice-deal'),
        $quantityElements = $('#ProductSection-Dl .quantity-selector, #ProductSection-Dl label + .js-qty'),
        $quantity = $('.product-form__item--quantity'),
        $addToCartText = $('#ProductSection-Dl #AddToCartText');
    if (variant) {
        if (window.swatch_enable) {
            var form = $('#' + selector.domIdPrefix).closest('form');
            for (var i = 0, length = variant.options.length; i < length; i++) {
                var radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i] + '"]');
                if (radioButton.size()) {
                    radioButton.get(0).checked = true;
                }
            }
        }
        if (variant.featured_image) {
            var newImage = variant.featured_image;
            var element = $productImage[0];
            Shopify.Image.switchImage(newImage, element, function(src, imgObject, el) {
              
              $('.thumbItem').parent().removeClass('active');
              $('.thumbItem[data-image-id="'+imgObject.id+'"]').parent().addClass('active');
              $('.thumbItem[data-image-id="'+imgObject.id+'"]').find('.image-zoom').attr('src', src);
              $("#productThumbs .owl-carousel").trigger("to.owl.carousel", [$('.thumbItem[data-image-id="'+imgObject.id+'"]').attr('data-position'), 1]);
            });
        }
        if (variant.available) {
        $quantity.show();
        $addToCart.removeClass('disabled').prop('disabled', false);
        $addToCartText.html("{{ 'products.product.add_to_cart' | t }}");
        $quantityElements.show();
      } else {
        $addToCart.addClass('disabled').prop('disabled', true);
        $addToCartText.html("{{ 'products.product.notify_me' | t }}");
        $quantity.hide();
        $quantityElements.hide();
        }
        $productPrice.html(theme.Currency.formatMoney(variant.price, moneyFormat));
        if (variant.compare_at_price > variant.price) {
            $comparePrice.html(theme.Currency.formatMoney(variant.compare_at_price, moneyFormat)).show();
        } else {
            $comparePrice.hide();
        }
        if ($('#currencies').length != 0) {
            Currency.convertAll(shopCurrency, $('#currencies span.selected').attr('data-currency'));
        }
    } else {
      $addToCart.addClass('disabled').prop('disabled', true);
      $addToCartText.html("{{ 'products.product.unavailable' | t }}");
      $quantityElements.hide();
      $quantity.hide();
    }
  };

  $(document).ready(function() {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallbackProduct,
      enableHistoryState: false
    });

    {% if product.available and product.options.size > 1 %}
      Shopify.linkOptionSelectors({{ product | json }});
    {% endif %}

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>